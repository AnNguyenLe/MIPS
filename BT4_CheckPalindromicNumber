# Bài tập 4. Viết chương trình nhập số nguyên n. Kiểm tra n có là số đối xưng hay không ?
# Problem: Write a MIPS program take an integer N as an input then check if N were a Palindromic / symmetrical number ?
# Cach tach 1 so thanh cac so hop thanh con so do / How to separate a number into numbers that combine into that number:
# div 2453 10 -> quotient 245 + remainder 3 => Luu / Store remainder to array[0] -> vi tri / location n - 4  =  0
# div 245 10 -> quotient 24 + remainder 5 => Luu / Store remainder to array[1] -> vi tri / location n - 3    =  1
# div 24 10 -> quotient 2 + remainder 4 => Luu / Store remainder to array[2] -> vi tri / location n - 2      =  2
# div 2 10 -> quotient 0 + remainder 2 => Luu / Store remainder to array[3] -> vi tri / location n - 1       =  3
# if (quotient == 0) -> stop looping
# Let's call $s1 is the base address of the array. So length of the array is: (address location n - based address of array) / 4 --> as 4 bytes is a word
# Calculate the value of n/2 for looping and compare array[i] and array[n - i - 1] --> If all of them matched then the Palindromic number
#
# Pseudo-code:
# (User input an integer N)
#
# isPalindromicNumber = true;
# # if (N < 0) 
# {
# 	isPalindromicNumber = false;
# 	goto Exit
# }
# if (N >= 0 && N < 10) 
# {
# 	goto Exit
# }
# int[] numArray;
# int counter = 0
# int temp = N
# do {
# 	[hi (remainder), lo (quotient)] = temp div 10
#	numArray[counter] = hi;
#	++counter
#	temp = quotient
# } while(quotient != 0)
# int numArrayLength = counter + 1;
# [hi (remainder), lo (quotient)] = numArrayLength div 2
# for(int i = 0; i <= quotient; i++)
# {
# 	if (numArray[i] != numArray[counter - i])
# 	{
#		isPalindromicNumber = false;
# 		goto Exit
#	}
# }
# Exit: return isPalindromicNumber

# Mapping:
# N -> $s0
# isPalindromicNumber -> $s1
# numArray's address -> $s2
# counter -> $s3
# constant 10 -> $t0
# current address of numArray OR index i -> $t1
# numArrayLength -> $t2
# HI and LO -> $t7 and $t6

.data 
	tb1: .asciiz "Nhap vao so nguyen N / Input an integer N: "
	tb2: .asciiz "\n==> N la so doi xung. / N is a Palindromic Number."
	tb3: .asciiz "\n==> N KHONG phai la so doi xung. / N is NOT a Palindromic Number."
	tb4: .asciiz "\n Elements:"
	lineBreak: .asciiz "\n"
	numArray: .word 0
.text

# Xuat thong bao nhap vao so N / Print info tb1, prompt user to input an integer N
li $v0 4
la $a0 tb1
syscall

# Doc N tu nguoi dung nhap vao / Read integer N
li $v0 5
syscall

# Luu N vao $s0 / Store N into $s0
move $s0 $v0

# Khoi tao gia tri cho / Init value for isPalindromicNumber ($s1) = true
li $s1 1

# Kiem tra / check if N < 0
blt $s0 $zero N_IS_NEGATIVE
bge $s0 $zero N_IS_GREATER_OR_EQUAL_ZERO
j NUMBER_BREAK_DOWN

N_IS_NEGATIVE:
li $s1 0
j EXIT

N_IS_GREATER_OR_EQUAL_ZERO:
li $t0 10
blt $s0 $t0 N_IS_GREATER_OR_EQUAL_ZERO_AND_LESS_THAN_10
j NUMBER_BREAK_DOWN

N_IS_GREATER_OR_EQUAL_ZERO_AND_LESS_THAN_10:
j EXIT

NUMBER_BREAK_DOWN:
# Gan dia chi cua numArray vao $s2 / Assign the numArray's address to $s2
la $s2 numArray

# Khoi tao gia tri ban dau cho counter ($s3) / Init value for counter ($s3): $s3 = 0
li $s3 0
add $t4 $s0 $zero
NUMBER_BREAK_DOWN.LOOP:

div $t4 $t0
mfhi $t7
mflo $t6

# Increase counter * 4 compare to based address of numArray
sll $t3, $s3, 2
# $t1 = address myArray[i]
add $t1, $s2, $t3

# numArray[i] = remainder (hi)
sw $t7, ($t1)
# ++counter
addi $s3 $s3 1
add $t4 $t6 $zero
bne $t6 $zero NUMBER_BREAK_DOWN.LOOP


# numArrayLength
addi $t2 $s3 1

# $t2 = counter ($s3) / 2
li $t0 2
div $s3 $t0
mflo $t2


# Khoi tao gia tri index i ($t1) / Init value for index i ($t1): $t1 = 0 - As we reuse $t1 from above so we should reset $t1 back to 0
li $t1 0
PAIR_CHECKING_LOOP:

# address of numArray[i]
sll $t3 $t1 2

add $t3 $t3 $s2
# $t3 = numArray[i]
lw $t3 ($t3)

# address of numArray[counter - i - 1]
subi $t5 $s3 1
sub $t5 $t5 $t1

sll $t4 $t5 2
add $t4 $t4 $s2
# $t4 = numArray[counter - i - 1]
lw $t4 ($t4)


bne $t3 $t4 TWO_NUMBER_NOT_EQUAL
addi $t1 $t1 1
# Loop for $t2 times
ble $t1 $t2 PAIR_CHECKING_LOOP
j EXIT

TWO_NUMBER_NOT_EQUAL:
li $s1 0


EXIT:
# Chuan bi xuat thong bao cuoi cung / Prepare to print if N were a perfect number or not
li $v0 4

bne $s1 $zero PRINT_PALINDROMIC_NUMBER
j PRINT_NOT_PALINDROMIC_NUMBER

PRINT_NOT_PALINDROMIC_NUMBER:
la $a0 tb3
j END_PROGRAM

PRINT_PALINDROMIC_NUMBER:
la $a0 tb2

END_PROGRAM:
syscall

